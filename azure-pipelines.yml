# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(TeamProject)-$(Date:yyyyMMdd)$(Rev:-r)

variables:
    projectName: AdventureWorksExample

trigger:
- master

# Using the default pool, because it is the one with the self-hosted agent, required by builds using Sql Server Data Tools.
pool: default

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true
  path: source

- task: PowerShell@1
  displayName: Build SSIS and Database Unit Test Projects
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      & "C:\Program Files (x86)\Microsoft Visual Studio\2017\SQL\Common7\IDE\devenv.com" $(Agent.BuildDirectory)\source\SLN_$(projectName)\SLN_$(projectName).sln /Build Development /project $(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)\$(projectName).dtproj /out log.txt
      & "C:\Program Files (x86)\Microsoft Visual Studio\2017\SQL\Common7\IDE\devenv.com" $(Agent.BuildDirectory)\source\SLN_$(projectName)\SLN_$(projectName).sln /Build Debug /project $(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)_UnitTests\$(projectName)_UnitTests.sqlproj /out log.txt

- task: PublishBuildArtifacts@1
  displayName: Publish ispac file to Pipeline Build Artifacts
  inputs:
    PathtoPublish: '$(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)\bin\Development'
    ArtifactName: '$(projectName).ispac'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: Publish dacpac file to Pipeline Build Artifacts
  inputs:
    PathtoPublish: '$(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)_UnitTests\bin\Debug'
    ArtifactName: '$(projectName)_UnitTests.dacpac'
    publishLocation: 'Container'

# Azure Key Vault
# Download Azure Key Vault secrets
- task: AzureKeyVault@1
  displayName: Retrieve Secrets from Azure Key Vault
  inputs:
    azureSubscription: 'Teach For America'
    KeyVaultName: 'ssiscicdAKV'
    SecretsFilter: '*'

# Technically we need a pom.xml file to use maven. But that seems like a lot, considering we aren't using maven to build the project (because it can't).
# So instead, we use a simple, generic pom.xml file from https://maven.apache.org/guides/introduction/introduction-to-the-pom.html and update the values on the command line.
- task: PowerShell@1
  displayName: Publish ispac file to ssiscicd Artifact feed
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      $settingsPath = "settings.xml"; 
      Set-Content -Path $settingsPath -Value $env:MAVEN_CRED;
      $minimalPomPath = "pom.xml"; 
      Set-Content -Path $minimalPomPath -Value @"
      <project>
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      </project>
      "@;
      echo $env:JAVA_HOME
      & "C:\agentTools\maven\apache-maven-3.6.2\bin\mvn.cmd" -s settings.xml -Durl=https://pkgs.dev.azure.com/elizabethbaron/ssiscicd/_packaging/ssiscicd/maven/v1 -DgroupId="org.teachforamerica.ssiscicd.demo" -DartifactId=$(projectName) -Dversion="1.0.$(Build.BuildId)" -Dfile=$(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)\bin\Development\$(projectName).ispac -Dpackaging=ispac -DrepositoryId=dev-azure-com-elizabethbaron-ssiscicd deploy:deploy-file -e
  env:
    MAVEN_CRED: $(mvncred)

- task: Kubernetes@1
  displayName: kubectl create namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'create'
    arguments: namespace pipeline-$(Build.BuildNumber)
    outputFormat: 'yaml'

- task: Kubernetes@1
  displayName: kubectl setup secret to container registry in namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'create'
    arguments: 'secret docker-registry regcred --docker-server=$(docker-server) --docker-username=$(docker-username) --docker-password=$(docker-password) --docker-email=$(docker-email)'
    outputFormat: 'yaml'

- task: Kubernetes@1
  displayName: kubectl apply deployment in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'apply'
    useConfigurationFile: true
    configuration: aks\mssqlssis.deployment.yaml
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'

- task: PowerShell@1
  displayName: Login to Azure Cloud and set podName variable
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      &az login --service-principal -u $(ssiscicdServicePrincipalURL) -p $(ssiscicdServicePrincipalPassword) --tenant $(ssiscicdTenantId)
      &az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
      # Get all running pods in the namespace
      $content = &kubectl get pods -n pipeline-$(Build.BuildNumber) --field-selector=status.phase=Running 2>&1
      # Ensure that this task does not run for more than about 90 seconds
      $waitLimit = 90
      $timeWaiting = 0
      While (($content -like 'No resources found*') -and ($timeWaiting -lt $waitLimit))
      {
      start-sleep -Seconds 5
      $timeWaiting = $timeWaiting + 5
      $content = &kubectl get pods -n pipeline-$(Build.BuildNumber) --field-selector=status.phase=Running 2>&1
      }
      $content = &kubectl get pods -n pipeline-$(Build.BuildNumber) --field-selector=status.phase=Running -o jsonpath="{.items[0].metadata.name}"
      Write-Host $content
      Write-Host "##vso[task.setvariable variable=podName;]$content"

- task: Kubernetes@1
  displayName: kubectl create the service for the deployment in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'expose'
    arguments: 'deployment mssqlssis-deployment --type=LoadBalancer --name=mssqlssis-service --port=$(port) --target-port=1433'
    outputFormat: 'yaml'

- task: PowerShell@1
  displayName: Login to Azure Cloud and set ipAddress variable
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      &az login --service-principal -u $(ssiscicdServicePrincipalURL) -p $(ssiscicdServicePrincipalPassword) --tenant $(ssiscicdTenantId)
      &az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
      # Get ipAddress for service in namespace
      $content = &kubectl get services -n pipeline-$(Build.BuildNumber) -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"
      # Ensure that this task does not run for more than about 90 seconds
      $waitLimit = 90
      $timeWaiting = 0
      While ([String]::IsNullOrWhiteSpace($content) -and ($timeWaiting -lt $waitLimit))
      {
      start-sleep -Seconds 5
      $timeWaiting = $timeWaiting + 5
      $content = &kubectl get services -n pipeline-$(Build.BuildNumber) -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"
      }
      $content = &kubectl get services -n pipeline-$(Build.BuildNumber) -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"
      Write-Host $content
      Write-Host "##vso[task.setvariable variable=ipAddress;]$content"

- task: Kubernetes@1
  displayName: kubectl download and install ssis package in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'exec'
    arguments: '$(podName) -- powershell.exe -File SSIS_SCRIPTS/deploy_ssis_package.ps1 https://pkgs.dev.azure.com/elizabethbaron/ssiscicd/_packaging/ssiscicd/maven/v1/org/teachforamerica/ssiscicd/demo/$(projectName)/1.0.$(Build.BuildId)/$(projectName)-1.0.$(Build.BuildId).ispac $(projectName)-1.0.$(Build.BuildId).ispac $(projectName)'
    outputFormat: 'yaml'

- task: PowerShell@1
  displayName: Deploy unit test dacpac(s)
  inputs:
    scriptType: 'inlineScript'
    workingFolder: '$(Agent.BuildDirectory)\source'
    inlineScript: |
      Copy-Item "$(Agent.BuildDirectory)\source\master.dacpac" -Destination "$(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)_UnitTests\Referenced Databases"
      Copy-Item "$(Agent.BuildDirectory)\source\msdb.dacpac" -Destination "$(Agent.BuildDirectory)\source\SLN_$(projectName)\$(projectName)_UnitTests\Referenced Databases"
      & "C:\Program Files\Microsoft SQL Server\150\DAC\bin\SqlPackage.exe" /Action:Publish /SourceFile:"SLN_$(projectName)\$(projectName)_UnitTests\Referenced Databases\db_tsqlt_ssis.dacpac" /TargetConnectionString:"Data Source=$(ipAddress),$(port);User ID=sa;Password=$(saPassword);Persist Security Info=False;Pooling=False;MultipleActiveResultSets=False;Connect Timeout=60;Encrypt=False;TrustServerCertificate=True;Initial Catalog=$(projectName)_UnitTests"
      & "C:\Program Files\Microsoft SQL Server\150\DAC\bin\SqlPackage.exe" /Action:Publish /SourceFile:SLN_$(projectName)\$(projectName)_UnitTests\bin\Debug\$(projectName)_UnitTests.dacpac /TargetConnectionString:"Data Source=$(ipAddress),$(port);User ID=sa;Password=$(saPassword);Persist Security Info=False;Pooling=False;MultipleActiveResultSets=False;Connect Timeout=60;Encrypt=False;TrustServerCertificate=True;Initial Catalog=$(projectName)_UnitTests"
      start-sleep -Seconds 300

- task: Kubernetes@1
  displayName: kubectl run unit tests in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'exec'
    arguments: '$(podName) -- sqlcmd.exe -d $(projectName)_UnitTests -Q "EXEC [tSQLt].[RunAll]"'
    outputFormat: 'yaml'

- task: PowerShell@1
  displayName: Save test results to xml file
  inputs:
    scriptType: 'inlineScript'
    workingFolder: '$(Agent.BuildDirectory)\source'
    inlineScript: |
      $xmlTestResultsFormatting = "xmlFormat.sql"; 
      Set-Content -Path $xmlTestResultsFormatting -Value @"
      :XML ON
      EXEC [tSQLt].[XmlResultFormatter];
      "@;
      & "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\SQLCMD.EXE" -S $(ipAddress),$(port) -U sa -P $(saPassword) -d $(projectName)_UnitTests -i $xmlTestResultsFormatting -o test-results.xml

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'
    failTaskOnFailedTests: false

- task: PowerShell@1
  displayName: 15 minute wait for demo purposes
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      if ($env:IS_DEMO -eq "true") {
        start-sleep -Seconds 900
      }
  env:
    IS_DEMO: $(demo)

- task: Kubernetes@1
  displayName: kubectl delete namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'delete'
    arguments: namespace pipeline-$(Build.BuildNumber)
    outputFormat: 'yaml'
